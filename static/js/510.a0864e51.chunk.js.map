{"version":3,"file":"static/js/510.a0864e51.chunk.js","mappings":"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","sources":["../node_modules/toggle-selection/index.js","../node_modules/copy-to-clipboard/index.js","Components/ContactList.tsx","utils/copyToClipboard.ts"],"sourcesContent":["\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"âŒ˜\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","import React, { useState, useContext } from \"react\";\nimport { copyToClipboard } from \"../utils/copyToClipboard\";\nimport { LanguageContext } from \"../Context/LanguageContext\";\n\n// images\nimport tel from \"../assets/tel.png\";\nimport mail from \"../assets/mail.png\";\nimport discord from \"../assets/discord.png\";\n\nconst ContactList: React.FC = () => {\n  const { getContent } = useContext(LanguageContext);\n  const [isMailCopied, setIsMailCopied] = useState(false);\n  const [isDCopied, setIsDCopied] = useState(false);\n\n  const handleCopy = (e: React.ChangeEvent<any>) => {\n    if (e.target.id === \"mail\") {\n      setIsMailCopied(true);\n      setTimeout(() => {\n        setIsMailCopied(false);\n      }, 1000);\n    } else if (e.target.id === \"discord\") {\n      setIsDCopied(true);\n      setTimeout(() => {\n        setIsDCopied(false);\n      }, 1000);\n    }\n    copyToClipboard(e);\n  };\n\n  return (\n    <>\n      {getContent().CONTACT_PROMPT}\n      <div className=\"contact-list\">\n        <div className=\"container\">\n          <div className=\"col-12 float-left\">\n            <ul className=\"nobull contact\" style={{ marginTop: \"30px\" }}>\n              <li onClick={handleCopy}>\n                <img src={mail} alt=\"mail icon\" className=\"footer-icon\" />\n                <span\n                  className={`${isMailCopied && \"blink\"} contact-list-item`}\n                  id=\"mail\"\n                >\n                  {isMailCopied ? \"mail copied\" : \"iamtheef_th@protonmail.com\"}\n                </span>\n              </li>\n              <li>\n                {\" \"}\n                <img src={tel} alt=\"tel\" className=\"footer-icon\" />\n                <span className=\"contact-list-item\">\n                  +30 6980970012 (Telegram, Viber)\n                </span>\n              </li>\n\n              <li onClick={handleCopy}>\n                {\" \"}\n                <img src={discord} alt=\"dscr\" className=\"footer-icon\" />\n                <span\n                  className={`${isDCopied && \"blink\"} contact-list-item`}\n                  id=\"discord\"\n                >\n                  {isDCopied ? \"discord copied\" : \"Th#1833\"}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","import copy from \"copy-to-clipboard\";\n\nexport const copyToClipboard = (e: any) => {\n  try {\n    copy(e.target.innerText);\n  } catch {\n    return;\n  }\n};\n"],"names":["module","exports","selection","document","getSelection","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","removeAllRanges","type","forEach","range","addRange","focus","deselectCurrent","require","clipboardToIE11Formatting","text","options","debug","message","reselectPrevious","mark","success","createRange","createElement","textContent","ariaHidden","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","console","warn","window","clearData","setData","onCopy","body","appendChild","selectNodeContents","execCommand","Error","err","error","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeChild","ContactList","getContent","useContext","LanguageContext","isMailCopied","setIsMailCopied","useState","isDCopied","setIsDCopied","handleCopy","target","id","setTimeout","copy","innerText","_unused","copyToClipboard","_jsxs","_Fragment","children","CONTACT_PROMPT","_jsx","className","marginTop","onClick","src","mail","alt","concat","tel","discord"],"sourceRoot":""}