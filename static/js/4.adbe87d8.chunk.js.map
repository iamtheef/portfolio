{"version":3,"sources":["assets/discord.png","../node_modules/copy-to-clipboard/index.js","../node_modules/toggle-selection/index.js","assets/tel.png","assets/mail.png","Components/ContactList.tsx","utils/copyToClipboard.ts"],"names":["module","exports","deselectCurrent","require","clipboardToIE11Formatting","text","options","debug","message","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","ariaHidden","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","console","warn","window","clearData","setData","onCopy","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","error","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","type","forEach","focus","ContactList","getContent","useContext","LanguageContext","isMailCopied","setIsMailCopied","useState","isDCopied","setIsDCopied","handleCopy","target","id","setTimeout","copy","innerText","copyToClipboard","React","Fragment","CONTACT_PROMPT","className","marginTop","onClick","src","mail","alt","tel","discord"],"mappings":"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","file":"static/js/4.adbe87d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/discord.1621404a.png\";","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"âŒ˜\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","module.exports = __webpack_public_path__ + \"static/media/tel.b4da3b65.png\";","module.exports = __webpack_public_path__ + \"static/media/mail.44a05797.png\";","import React, { useState, useContext } from \"react\";\nimport { copyToClipboard } from \"../utils/copyToClipboard\";\nimport { LanguageContext } from \"../Context/LanguageContext\";\n\n// images\nimport tel from \"../assets/tel.png\";\nimport mail from \"../assets/mail.png\";\nimport discord from \"../assets/discord.png\";\n\nconst ContactList: React.FC = () => {\n  const { getContent } = useContext(LanguageContext);\n  const [isMailCopied, setIsMailCopied] = useState(false);\n  const [isDCopied, setIsDCopied] = useState(false);\n\n  const handleCopy = (e: React.ChangeEvent<any>) => {\n    if (e.target.id === \"mail\") {\n      setIsMailCopied(true);\n      setTimeout(() => {\n        setIsMailCopied(false);\n      }, 1000);\n    } else if (e.target.id === \"discord\") {\n      setIsDCopied(true);\n      setTimeout(() => {\n        setIsDCopied(false);\n      }, 1000);\n    }\n    copyToClipboard(e);\n  };\n\n  return (\n    <>\n      {getContent().CONTACT_PROMPT}\n      <div className=\"contact-list\">\n        <div className=\"container\">\n          <div className=\"col-12 float-left\">\n            <ul className=\"nobull contact\" style={{ marginTop: \"30px\" }}>\n              <li onClick={handleCopy}>\n                <img src={mail} alt=\"mail icon\" className=\"footer-icon\" />\n                <span\n                  className={`${isMailCopied && \"blink\"} contact-list-item`}\n                  id=\"mail\"\n                >\n                  {isMailCopied ? \"mail copied\" : \"iamtheef_th@protonmail.com\"}\n                </span>\n              </li>\n              <li>\n                {\" \"}\n                <img src={tel} alt=\"tel\" className=\"footer-icon\" />\n                <span className=\"contact-list-item\">\n                  +30 6980970012 (Telegram, Viber)\n                </span>\n              </li>\n\n              <li onClick={handleCopy}>\n                {\" \"}\n                <img src={discord} alt=\"dscr\" className=\"footer-icon\" />\n                <span\n                  className={`${isDCopied && \"blink\"} contact-list-item`}\n                  id=\"discord\"\n                >\n                  {isDCopied ? \"discord copied\" : \"Th#1833\"}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","import copy from \"copy-to-clipboard\";\n\nexport const copyToClipboard = (e: any) => {\n  try {\n    copy(e.target.innerText);\n  } catch {\n    return;\n  }\n};\n"],"sourceRoot":""}